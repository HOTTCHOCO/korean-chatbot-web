# 기본 보안 및 데이터 보호 정책 적용

**Task ID:** T-008
**Status:** BACKLOG
**Importance:** MUST
**Complexity:** 4/10
**Urgency:** 7/10
**Dependencies:** T-002, T-007

## Description

### 설명
Supabase RLS(Row Level Security) 정책을 통해 사용자별 데이터 접근 권한을 제한하고, 환경변수 관리 등 기본적인 보안 설정을 적용합니다.

### 구현 상세
1.  **Supabase RLS 정책 강화**: Supabase 대시보드의 SQL Editor를 사용하여 RLS 정책을 설정합니다.
    -   `conversations` 및 `messages` 테이블에 대해, `SELECT`, `INSERT`, `UPDATE`, `DELETE` 권한을 `auth.uid() = user_id` 조건을 만족하는 사용자로 제한하는 정책을 생성하고 활성화합니다. 이를 통해 사용자는 자신의 데이터에만 접근할 수 있습니다.
2.  **환경변수 관리 검토**: Vercel과 Render 대시보드에서 `SUPABASE_URL`, `SUPABASE_ANON_KEY`, `OPENAI_API_KEY` 등 모든 민감 정보가 환경변수로 올바르게 설정되었는지 다시 한번 확인하고, 코드 저장소에 노출되지 않았는지 검증합니다.
3.  **백엔드 보안 강화**:
    -   `helmet` 라이브러리를 Express 앱에 적용하여 일반적인 웹 취약점(예: XSS, clickjacking)으로부터 보호하는 보안 관련 HTTP 헤더를 설정합니다.
    -   `express-rate-limit` 라이브러리를 사용하여 `/api/chat`과 같은 주요 API 엔드포인트에 요청 횟수 제한을 적용하여 DoS 공격 및 API 남용을 방지합니다.

### 테스트 전략
- **RLS 정책 검증**: 
    -   두 개의 다른 테스트 계정(사용자 A, 사용자 B)을 생성합니다.
    -   사용자 A로 로그인하여 대화를 생성합니다.
    -   사용자 B로 로그인한 상태에서, API 클라이언트나 테스트 스크립트를 이용해 사용자 A의 대화 데이터를 조회하는 요청을 시도합니다. 이 요청은 RLS 정책에 의해 차단되어 빈 결과를 반환해야 합니다.
- **보안 헤더 검증**: 브라우저 개발자 도구의 네트워크 탭이나 온라인 보안 스캐너를 사용하여, 백엔드 서버의 응답에 `X-Content-Type-Options`, `Strict-Transport-Security` 등의 보안 헤더가 포함되어 있는지 확인합니다.

---

**Created:** 2025-08-07T03:01:17.682Z
**Updated:** 2025-08-07T03:01:17.682Z
