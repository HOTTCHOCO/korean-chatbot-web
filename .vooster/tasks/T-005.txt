# 백엔드 API 서버 구축 (Node.js/Express)

**Task ID:** T-005
**Status:** BACKLOG
**Importance:** MUST
**Complexity:** 5/10
**Urgency:** 8/10
**Dependencies:** T-001, T-002

## Description

### 설명
RESTful API 서버를 구축하여, 클라이언트와의 통신 및 외부 서비스 연동의 중계 역할을 수행합니다. API 구조를 명확히 설계하고, 기본 에러 핸들링을 포함합니다.

### 구현 상세
1.  **프로젝트 구조 설정**: TRD에 정의된 `domains` 기반 아키텍처에 따라 `domains/chat` 디렉토리를 생성하고, 내부에 `chat.router.ts`, `chat.controller.ts`, `chat.service.ts` 파일을 구성합니다.
2.  **API 엔드포인트 정의**: `chat.router.ts`에서 `POST /api/chat` 엔드포인트를 생성합니다. 이 엔드포인트는 사용자의 질문을 받아 처리하는 역할을 합니다.
3.  **인증 미들웨어 구현**: 클라이언트에서 전송한 `Authorization` 헤더의 JWT를 검증하는 미들웨어를 작성합니다. Supabase 클라이언트의 `getUser(jwt)` 함수를 사용하여 토큰의 유효성을 확인하고, 요청 객체에 사용자 정보를 추가합니다. 유효하지 않은 토큰은 401 Unauthorized 에러로 처리합니다.
4.  **CORS 및 에러 핸들링 설정**: `cors` 미들웨어를 사용하여 Vercel 프론트엔드 도메인からの 요청을 허용합니다. 또한, Express 애플리케이션 전역에서 발생하는 에러를 일관되게 처리하기 위한 중앙 에러 핸들링 미들웨어를 구현합니다.

### 테스트 전략
- **API 테스트 도구 사용 (Postman/Insomnia)**:
    -   인증 토큰 없이 `/api/chat` 엔드포인트에 요청을 보내 401 에러가 반환되는지 확인합니다.
    -   유효한 JWT를 헤더에 포함하여 요청을 보냈을 때, 200 OK와 함께 (임시) 성공 응답이 반환되는지 확인합니다.
    -   잘못된 형식의 요청 본문을 보냈을 때, 400 Bad Request 에러가 반환되는지 테스트합니다.

---

**Created:** 2025-08-07T03:01:17.682Z
**Updated:** 2025-08-07T03:01:17.682Z
